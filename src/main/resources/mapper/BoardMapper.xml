<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.petmily.mapperInterface.BoardMapper">

	<!-- NOTICE LIST -->
	<select id="getNoticeList" resultType="com.petmily.domain.NoticeDTO">
		SELECT *
		FROM notice
		WHERE (#{searchPeriod} IS NULL OR
		    CASE
		        WHEN 'week' = #{searchPeriod} THEN notice_regdate >= DATE_SUB(NOW(), INTERVAL 1 WEEK)
		        WHEN 'month' = #{searchPeriod} THEN notice_regdate >= DATE_SUB(NOW(), INTERVAL 1 MONTH)
		        WHEN 'firstQuarter' = #{searchPeriod} THEN notice_regdate >= DATE_SUB(NOW(), INTERVAL 3 MONTH)
		        ELSE 1=1
		    END)
		AND (#{searchCriteria} IS NULL OR
		    CASE
		        WHEN 'subject' = #{searchCriteria} THEN LOWER(notice_title) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        WHEN 'content' = #{searchCriteria} THEN LOWER(notice_content) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        ELSE 1=1
		    END)
		ORDER BY NOTICE_REGDATE DESC;
	</select>

	<select id="getNoticePagedList"
		resultType="com.petmily.domain.NoticeDTO">
		SELECT * FROM notice
		ORDER BY notice_id DESC
		LIMIT #{sno}, #{rowsPerPage}
	</select>

	<select id="noticeTotalCount" resultType="int">
		SELECT COUNT(*) FROM notice
	</select>


	<!-- INQUIRY LIST -->
	<select id="getInquiryList" resultType="com.petmily.domain.InquiryDTO">
		SELECT inquiry.*,
		(SELECT P.product_name
	     FROM product P
	     WHERE P.product_id = inquiry.product_id) AS product_name
		FROM inquiry
		WHERE (#{searchCheck} IS NULL OR
		    CASE
		        WHEN 'complete' = #{searchCheck} THEN ANSWER_CONTENT IS NOT NULL
		        WHEN 'ongoing' = #{searchCheck} THEN ANSWER_CONTENT IS NULL
		        ELSE 1=1
		    END)
		AND (#{searchCriteria} IS NULL OR
		    CASE
		        WHEN 'subject' = #{searchCriteria} THEN LOWER(INQUIRY_TITLE) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        WHEN 'content' = #{searchCriteria} THEN LOWER(INQUIRY_CONTENT) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        WHEN 'writer' = #{searchCriteria} THEN LOWER(INQUIRY_WRITER) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        WHEN 'product' = #{searchCriteria} THEN LOWER(
		        (	SELECT P.PRODUCT_NAME
	     			FROM product P
	     			WHERE P.PRODUCT_ID = inquiry.PRODUCT_ID)
	     		) 	LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        ELSE 1=1
		    END)
		ORDER BY INQUIRY_REGDATE DESC;
	</select>

	<select id="getInquiryPagedList"
		resultType="com.petmily.domain.InquiryDTO">
		SELECT *,
		(SELECT P.PRODUCT_NAME FROM product P WHERE P.PRODUCT_ID = inquiry.PRODUCT_ID) AS PRODUCT_NAME
		FROM inquiry
		ORDER BY INQUIRY_ID DESC
		LIMIT #{sno},
		#{rowsPerPage}
	</select>

	<select id="inquiryTotalCount" resultType="int">
		SELECT COUNT(*) FROM inquiry
	</select>

	<insert id="insertInquiry">
		INSERT INTO inquiry (INQUIRY_TITLE, PRODUCT_ID, INQUIRY_WRITER, INQUIRY_CONTENT) VALUES
		(#{inquiry_title},#{product_id}, #{inquiry_writer}, #{inquiry_content})
	</insert>


	<!-- REVIEW LIST -->

	<select id="getReviewList" resultType="com.petmily.domain.ReviewDTO">
		SELECT review.*, P.PRODUCT_NAME, P.PRODUCT_MAINIMAGEPATH
	    FROM review
	    LEFT JOIN product P ON P.PRODUCT_ID = review.PRODUCT_ID
		WHERE (#{searchPeriod} IS NULL OR
		    CASE
		        WHEN 'week' = #{searchPeriod} THEN REVIEW_REGDATE >= DATE_SUB(NOW(), INTERVAL 1 WEEK)
		        WHEN 'month' = #{searchPeriod} THEN REVIEW_REGDATE >= DATE_SUB(NOW(), INTERVAL 1 MONTH)
		        WHEN 'firstQuarter' = #{searchPeriod} THEN REVIEW_REGDATE >= DATE_SUB(NOW(), INTERVAL 3 MONTH)
		        ELSE 1=1
		    END)
		AND (#{searchCriteria} IS NULL OR
		    CASE
		        WHEN 'subject' = #{searchCriteria} THEN LOWER(REVIEW_TITLE) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        WHEN 'content' = #{searchCriteria} THEN LOWER(REVIEW_CONTENT) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        WHEN 'writer' = #{searchCriteria} THEN LOWER(REVIEW_WRITER) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        ELSE 1=1
		    END)
		ORDER BY REVIEW_REGDATE DESC;
	</select>

	<select id="getReviewPagedList"
		resultType="com.petmily.domain.ReviewDTO">
		SELECT *,
		(SELECT P.PRODUCT_NAME FROM product P WHERE P.PRODUCT_ID = review.PRODUCT_ID) AS PRODUCT_NAME
		FROM review
		ORDER BY REVIEW_ID DESC
		LIMIT #{sno},
		#{rowsPerPage}
	</select>

	<select id="reviewTotalCount" resultType="int">
		SELECT COUNT(*) FROM review
	</select>

	<!-- FAQ LIST -->
	<select id="getFaqList" resultType="com.petmily.domain.FaqDTO">
		SELECT *
		FROM faq
		WHERE (#{searchType} IS NULL OR
		    CASE
		        WHEN 'delivery' = #{searchType} THEN QUESTION_TYPE = '결제/배송'
		        WHEN 'join' = #{searchType} THEN QUESTION_TYPE = '회원가입/정보'
		        WHEN 'refund' = #{searchType} THEN QUESTION_TYPE = '교환/환불'
		        WHEN 'etc' = #{searchType} THEN QUESTION_TYPE = '기타'
		        ELSE 1=1
		    END)
		AND (#{searchCriteria} IS NULL OR
		    CASE
		        WHEN 'subject' = #{searchCriteria} THEN LOWER(FAQ_TITLE) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        WHEN 'content' = #{searchCriteria} THEN LOWER(FAQ_CONTENT) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        WHEN 'writer' = #{searchCriteria} THEN LOWER(FAQ_WRITER) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        ELSE 1=1
		    END)
		ORDER BY FAQ_REGDATE DESC;
	</select>

	<select id="getFaqPagedList"
		resultType="com.petmily.domain.FaqDTO">
		SELECT * FROM faq
		ORDER BY FAQ_ID DESC
		LIMIT #{sno}, #{rowsPerPage}
	</select>

	<select id="faqTotalCount" resultType="int">
		SELECT COUNT(*) FROM faq
	</select>
	<!-- BOADR LIST END -->


	<!-- NOTICE CRUD -->

	<select id="getNotice"
		resultType="com.petmily.domain.NoticeDTO">
		SELECT * FROM notice WHERE NOTICE_ID = #{notice_id}
	</select>

	<update id="updateNotice">
		UPDATE notice
		SET NOTICE_TITLE = #{notice_title},
		NOTICE_CONTENT = #{notice_content}
		WHERE NOTICE_ID = #{notice_id}
	</update>

	<insert id="insertNotice">
		INSERT INTO notice (NOTICE_TITLE, NOTICE_WRITER
		,NOTICE_CONTENT) VALUES
		(#{notice_title},#{notice_writer},#{notice_content})
	</insert>

	<delete id="deleteNotice">
		DELETE FROM notice WHERE NOTICE_ID = #{notice_id}
	</delete>

	<!-- NOTICE CRUD END -->


	<!-- INQUIRY CRUD -->

	<select id="getInquiry"
		resultType="com.petmily.domain.InquiryDTO">
		SELECT inquiry.*,
		(SELECT P.PRODUCT_NAME FROM product P WHERE P.PRODUCT_ID = inquiry.PRODUCT_ID) AS PRODUCT_NAME
		FROM inquiry
		WHERE INQUIRY_ID = #{inquiry_id}
	</select>

	<update id="updateInquiry">
		UPDATE inquiry SET ANSWER_CONTENT =
		#{answer_content}, ANSWER_REGDATE = CURRENT_TIMESTAMP WHERE INQUIRY_ID
		= #{inquiry_id}
	</update>

	<update id="updateBoardInquiry">
		UPDATE inquiry SET INQUIRY_TITLE = #{inquiry_title}, PRODUCT_ID = #{product_id}, INQUIRY_CONTENT = #{inquiry_content}
		WHERE INQUIRY_ID = #{inquiry_id}
	</update>

	<delete id="deleteInquiry">
		DELETE FROM inquiry WHERE INQUIRY_ID = #{inquiry_id}
	</delete>

	<!-- INQUIRY CRUD END -->


	<!-- FAQ CRUD -->

	<select id="getFaq"
		resultType="com.petmily.domain.FaqDTO">
		SELECT * FROM faq WHERE FAQ_ID = #{faq_id}
	</select>

	<update id="updateFaq">
		UPDATE faq
		SET FAQ_TITLE = #{faq_title}, QUESTION_TYPE	= #{question_type},
		FAQ_CONTENT = #{faq_content}, FAQ_REGDATE =	CURRENT_TIMESTAMP
		WHERE FAQ_ID = #{faq_id}
	</update>

	<insert id="insertFaq">
		INSERT INTO faq (FAQ_TITLE, FAQ_WRITER ,QUESTION_TYPE, FAQ_CONTENT)
		VALUES (#{faq_title},'펫밀리',#{question_type},#{faq_content})
	</insert>

	<delete id="deleteFaq">
		DELETE FROM faq WHERE FAQ_ID = #{faq_id}
	</delete>

	<!-- FAQ CRUD END -->


	<!-- REVIEW CRUD -->

	<insert id="insertReview">
		INSERT INTO review (REVIEW_TITLE, PRODUCT_ID, REVIEW_WRITER, REVIEW_POINT, REVIEW_CONTENT, REVIEW_IMAGE1, REVIEW_IMAGE2, ORDER_KEY) VALUES
		(#{review_title},#{product_id},#{review_writer},#{review_point}, #{review_content}, #{review_image1}, #{review_image2}, #{order_key})
	</insert>

	<select id="getReview"
		resultType="com.petmily.domain.ReviewDTO">
		SELECT R.*, P.PRODUCT_NAME, P.PRODUCT_MAINIMAGEPATH,
    		CASE WHEN EXISTS (SELECT 1 FROM review_reply RR WHERE RR.REVIEW_ID = R.REVIEW_ID) THEN true ELSE false END AS REPLY_CHECK
		FROM review R
		LEFT JOIN product P ON P.PRODUCT_ID = R.PRODUCT_ID
		WHERE R.REVIEW_ID = #{review_id}
	</select>

	<update id="updateReview">
		UPDATE review
		SET REVIEW_TITLE = #{review_title},
		REVIEW_POINT = #{review_point},
		REVIEW_CONTENT = #{review_content},
		REVIEW_IMAGE1 = #{review_image1}, REVIEW_IMAGE2 = #{review_image2}
		WHERE REVIEW_ID =
		#{review_id}
	</update>

	<delete id="deleteReview">
		DELETE FROM review WHERE REVIEW_ID = #{review_id}
	</delete>

	<update id="updateBoardReview">
		UPDATE review SET REVIEW_TITLE = #{review_title}, PRODUCT_ID = #{product_id}, REVIEW_POINT = #{review_point},
		REVIEW_CONTENT = #{review_content}, REVIEW_IMAGE1 = #{review_image1}, REVIEW_IMAGE2 = #{review_image2}
		WHERE REVIEW_ID = #{review_id}
	</update>

	<select id="getReplyList"
		resultType="com.petmily.domain.ReviewReplyDTO">
		SELECT RR.REPLY_ID, RR.REPLY_WRITER, RR.REPLY_CONTENT,RR.REPLY_REGDATE
		FROM review R LEFT JOIN review_reply RR
		ON R.REVIEW_ID = RR.REVIEW_ID
		WHERE R.REVIEW_ID = #{review_id};
	</select>

	<insert id="insertReply">
		INSERT INTO review_reply (REVIEW_ID, REPLY_WRITER, REPLY_CONTENT) VALUES
		(#{review_id},#{reply_writer},#{reply_content})
	</insert>

	<delete id="deleteReply">
		DELETE FROM review_reply WHERE REPLY_ID = #{reply_id}
	</delete>


	<!-- REVIEW CRUD END -->



	<select id="getAllProducts" resultType="com.petmily.domain.ProductDTO">
		select * from product
	</select>

	<select id="getProductByKind" resultType="com.petmily.domain.ProductDTO">
	    SELECT *
		FROM product
		WHERE
		    CASE
		        WHEN #{kind} = 'all' THEN 1=1
		        ELSE PRODUCT_KIND = #{kind}
		    END;
	</select>

	<select id="getProductByCategory" resultType="com.petmily.domain.ProductDTO">
		SELECT * FROM product WHERE PRODUCT_KIND = #{kind} AND PRODUCT_CATEGORY = #{category}
	</select>

	<select id="getProduct" resultType="com.petmily.domain.ProductDTO">
		select * from product where product_name like CONCAT('%', LOWER(#{name}), '%')
	</select>

	<update id="updateNoticeCount">
		UPDATE notice SET NOTICE_COUNT = NOTICE_COUNT + 1 WHERE NOTICE_ID = #{notice_id}
	</update>
	<update id="updateInquiryCount">
		UPDATE inquiry SET INQUIRY_COUNT = INQUIRY_COUNT + 1 WHERE INQUIRY_ID = #{inquiry_id}
	</update>
	<update id="updateReviewCount">
		UPDATE review SET REVIEW_COUNT = REVIEW_COUNT + 1 WHERE REVIEW_ID = #{review_id}
	</update>
	<update id="updateFaqCount">
		UPDATE faq SET FAQ_COUNT = FAQ_COUNT + 1 WHERE FAQ_ID = #{faq_id}
	</update>

	<select id ="getEmail" resultType="com.petmily.domain.UserDTO">
		SELECT * FROM user WHERE USER_NAME = #{inquiry_writer}
	</select>

	<select id="getProductByUser" resultType="com.petmily.domain.OrderProductByUserDTO">
		SELECT P.PRODUCT_ID, P.PRODUCT_NAME, OP.ORDER_DATE, OP.USER_ID, OP.ORDER_KEY
		FROM product P
		LEFT JOIN order_detail OD
			ON P.PRODUCT_ID = OD.PRODUCT_ID
		LEFT JOIN order_product OP
			ON OD.ORDER_KEY = OP.ORDER_KEY
		WHERE OP.USER_ID = #{userName}
			AND OP.ORDER_DATE BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND DATE_ADD(CURDATE(), INTERVAL 1 DAY)
			AND OD.DELIVERY_STATUS = '배송완료'
			AND OD.PRODUCT_REVIEW = FALSE
	</select>

	<update id="updateStatus">
		UPDATE order_detail AS OD
		INNER JOIN order_product AS OP ON OD.ORDER_KEY = OP.ORDER_KEY
		SET OD.PRODUCT_REVIEW = TRUE
		WHERE OP.USER_ID = #{user_id} AND OD.ORDER_KEY = #{order_key} AND OD.PRODUCT_ID = #{product_id}
	</update>

	<update id="updateStatusDelete">
		UPDATE order_detail AS OD
		INNER JOIN order_product AS OP ON OD.ORDER_KEY = OP.ORDER_KEY
		SET OD.product_review = FALSE
		WHERE OP.USER_ID = #{user_id} AND OD.ORDER_KEY = #{order_key} AND OD.PRODUCT_ID = #{product_id}
	</update>

	<select id="getReviewTest" resultType="com.petmily.domain.ReviewDTO">
		SELECT * FROM review WHERE ORDER_KEY = #{order_key} AND PRODUCT_ID = #{product_id}
	</select>
</mapper>